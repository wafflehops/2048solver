import unittest
from src.find_path import find_path_bfs


class FindPathTest(unittest.TestCase):
    def test_find_path1(self):
        board = [
            [2048, 2, 2, 2, 2],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ]

        self.assertEqual('22', find_path_bfs(board) )


    def test_find_path2(self):
        board = [
            [2048, 2, 2048, 2, 2048],
            [2048, 0, 2048, 0, 2048],
            [2048, 0, 2048, 0, 2048],
            [2048, 0, 0, 0, 2048],
            [0, 0, 2048, 0, 0]
        ]

        self.assertEqual('impossible', find_path_bfs(board) )
    

    def test_find_path3(self):
        board = [
            [2, 2048, 2048, 0, 2048, 0, 2048, 0, 0, 0],
            [0, 2048, 2048, 0, 2048, 0, 2048, 0, 2048, 0],
            [0, 2048, 2048, 0, 2048, 0, 2048, 0, 2048, 0],
            [0, 0, 0, 0, 2048, 0, 2048, 0, 2048, 0],
            [2048, 2048, 2048, 0, 2048, 0, 0, 0, 2048, 0],
            [0, 0, 0, 0, 2048, 0, 0, 0, 2048, 2],
            [0, 2048, 2048, 2048, 2048, 0, 0, 0, 2048, 2048],
            [0, 2048, 2048, 2048, 0, 0, 0, 0, 2048, 2048],
            [0, 0, 0, 0, 0, 2048, 0, 2048, 2048, 2048],
            [2048, 2048, 2048, 2048, 2048, 2048, 0, 2048, 2048, 2048]
        ]

        self.assertEqual('14323432', find_path_bfs(board) )
    

    def test_find_path4(self):
        board = [
            [2, 2048, 2048,    0, 2048,    0, 2048,    0,    0,    0],
            [0, 2048, 2048,    0, 2048,    0, 2048,    0, 2048,    0 ],
            [0, 2048, 2048,    0, 2048,    0, 2048,    0, 2048,    0 ],
            [0,    0,    0,    0, 2048,    0, 2048,    0, 2048,    0 ],
            [2048, 2048, 2048, 2048, 2048,    0,    0,    0, 2048,    0 ],
            [0,    0,    0,    0, 2048,    0,    0,    0, 2048,    2 ],
            [0, 2048, 2048, 2048, 2048,    0,    0,    0, 2048, 2048 ],
            [0, 2048, 2048, 2048,    0,    0,    0,    0, 2048, 2048 ],
            [0,    0,    0,    0,    0, 2048,    0, 2048, 2048, 2048 ],
            [2048, 2048, 2048, 2048, 2048, 2048,    0, 2048, 2048, 2048]
        ]

        self.assertEqual('impossible', find_path_bfs(board) )
    

    def test_find_path5(self):
        board = [
            [2,    0,    0,    0, 2048,    0, 2048,   0],
            [0, 2048, 2048,    0, 2048,    0, 2048,    0],
            [2048,    0,    0,    0,    0,    0, 2048,    0],
            [0,    0,    0, 2048, 2048, 2048, 2048,    0],
            [2048, 2048,    0, 2048,    0, 2048,    0,    0],
            [0,    0,    0,    0,    0,    0,    0,    0],
            [0, 2048,    0, 2048,    0, 2048, 2048,    0],
            [0,    0,    0, 2048,    0,    0,    0,   2]
        ]

        self.assertEqual('23432341232', find_path_bfs(board) )
    

    def test_find_path6(self):
        board = [
            [0, 0, 0],
            [8, 32, 4],
            [16, 2, 2]
        ]

        self.assertEqual('23214122', find_path_bfs(board) )


if __name__=='__main__':
    unittest.main()